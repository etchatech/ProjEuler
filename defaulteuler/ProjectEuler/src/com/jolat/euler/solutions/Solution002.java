package com.jolat.euler.solutions;

import com.jolat.euler.launcher.AbstractCommand;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the
 * first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence
 * whose values do not exceed four million, find the sum of the even-valued terms.
 * 
 * @author jasonoliverlat
 */
public class Solution002 extends AbstractCommand
{
	private String	answer	= null;
	
	@Override
	public String execute ()
	{
		Long firstNumber = new Long ( 0L );
		Long secondNumber = new Long ( 1L );
		Long finalValue = new Long ( 0L );
		while ( finalValue < 4000000 )
		{
			Long currentValue = firstNumber + secondNumber;
			firstNumber = secondNumber;
			secondNumber = currentValue;
			
			if ( currentValue % 2 == 0 )
			{
				finalValue += currentValue;
			}
		}
		answer = finalValue.toString ();
		return answer;
	}
	
	// public static List<Integer> buildFibonacciToXTerms(int x) {
	// int ctr = 0;
	//
	// Long firstNumber = new Long(0L);
	// Long secondNumber = new Long(1L);
	// Long finalValue = new Long(0L);
	// while (ctr < x) {
	// Long currentValue = firstNumber + secondNumber;
	// firstNumber = secondNumber;
	// secondNumber = currentValue;
	// if (currentValue % 2 == 0) {
	// finalValue += currentValue;
	// }
	// ctr++;
	// }
	// }
	
	@Override
	public String getSolutionDetails ()
	{
		return "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: \n"
				+ "\n"
				+ "1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n"
				+ "\n"
				+ "By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.";
	}
	
	public static void main ( String[] args )
	{
		new Solution002 ();
	}
}
